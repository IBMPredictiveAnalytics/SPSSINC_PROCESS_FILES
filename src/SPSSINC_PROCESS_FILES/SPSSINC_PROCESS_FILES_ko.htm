<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
  <meta http-equiv="Content-Type" content=
  "text/html; charset=utf-8">

  <title>데이터 파일 세트에 명령문 파일 적용</title>
  <style type="text/css">

  <!-- 

  H1 {font-weight:bold; color:#006699; font-size:125%; }
  H2 {font-weight:bold; color:#006699; font-size:110%; }
  TABLE {font-size:100%;}

  /* paragraph tags */
  .step {text-indent: -1.3em; margin-left:1.3em; margin-top: 0px;}
  .menuselection {margin-left:10px}
  .bullet {list-style-type: disc;margin-top:12px; margin-left:36px; text-indent:-1em; }
  .codeblock {background-color: #ffffe6; display:block; margin-left:5px; padding:5px;}

  /* inline tags */
  .screen {font-weight:bold; color:#408080}                       /*** used refer to on-screen text ***/
  .name {font-style: italic}                                                       /*** used to tag names, such as variable names, file names, and so forth ***/
  .runinhead {font-weight: bold} 
  .superscript {vertical-align:super; font-size:80%}
  .subscript {vertical-align:sub; font-size:80%}


  --> 
  </style>
</head>

<body>
  <h1>데이터 파일 세트에 명령문 파일 적용</h1>이 프로시저는 데이터 파일 콜렉션을 통해 루프하는 방법을 제공하고
  각각에 대해 동일한 명령문 세트를 적용합니다. 명령문에는 임의 명령이 포함될 수 있습니다. 매크로 및 파일 작업은 입력 및 결과 사양을 참조하기 위해 제공됩니다.  <p>이 프로시저를 SPSSINC SPLIT DATASET와 결합하여 사용하면 분할 변수 값에 따라
  데이터 세트를 구분할 수 있으므로 편리할 수 있습니다.</p>

  <p><span class="runinhead">와일드카드 표현식으로 지정된 입력 데이터 파일.</span> 처리할 디렉토리를
선택하고, 선택적으로 파일 패턴을 지정하십시오. 예를 들면
다음과 같습니다.<br>
  c:\mydata\x*.sav<br>
  이름이 x 자로 시작하는 c:\mydata 디렉토리에 있는 모든 sav 파일을 처리합니다.</p>

  <p class="bullet">• 파일 이름 표현식이 지정되지 않으면, *.sav로 간주합니다.</p>

  <p class="bullet">• 이 옵션 또는 다음 <span class="screen">입력 데이터</span> 옵션 중 하나(모두는 아님)를
선택해야 합니다.</p>

  <p><span class="runinhead">파일에 지정된 입력 데이터 파일.</span> 지정한 파일에 나열된 모든 파일을 처리합니다. SPSSINC SPLIT DATASET 명령은 올바른 형식의 파일을 생성할 수 있습니다.</p>

  <p class="bullet">• 이 옵션 또는 이전 <span class="screen">입력 데이터</span> 옵션(모두는 아님) 중
하나를 선택해야 합니다.</p>

  <p><span class="runinhead">각 데이터 파일에 대해 실행할 명령문 파일.</span> 명령문 파일은 각 입력 데이터 세트에
  대해 호출됩니다. 파일을 읽고 원하는 조작을 수행해야 합니다. 파일 핸들 및 매크로는 입력 파일 및
  다양한 결과 위치를 참조하기 위해 정의됩니다. 파일 핸들은 다음과 같습니다.</p>

  <ul>
    <li>JOB_INPUTFILE: 입력 파일</li>

    <li>JOB_DATADIR: 입력 데이터 디렉토리</li>

    <li>JOB_OUTPUTDATADIR: 지정된 결과 데이터 디렉토리 또는 <i>&lt;NONE&gt;</i></li>

    <li>JOB_VIEWERDIR: 지정된 뷰어 출력결과 디렉토리 또는 <i>&lt;NONE&gt;</i></li>
  </ul>

  <p class="bullet">• SAV 파일의 경우 다음 명령으로 데이터를 읽을 수 있습니다.<br>
  GET FILE="JOB_INPUTFILE".</p>

  <p class="bullet">• 매크로는 "!"로 시작하는 것을 제외하고 모두
  동일한 이름으로 정의됩니다. 두 개의 추가 매크로가 정의됩니다.</p>

  <ul>
    <li>!JOB_DATAFILEROOT: 확장자가 없는 입력 데이터 파일의 이름</li>

    <li>!JOB_DATAFILEEXT: 입력 데이터 파일의 확장</li>
  </ul>

  <p><i>!JOB</i> 또는 <i>JOB</i> 텍스트는 루트 이름 제어에서 지정한 루트 이름으로 대체됩니다.</p>

  <p class="bullet">• 매크로 텍스트는 따옴표로 묶습니다. 다음은 확장자가 .xls인
  데이터 파일의 이름을 사용하여 지정된 뷰어 디렉토리로 뷰어 컨텐츠를 내보내는 데 사용할 수 있는 코드
  예제입니다.<br></p>

  <p class="code">DEFINE !out ()
  !QUOTE(!CONCAT(!EVAL(!UNQUOTE(!JOB_VIEWERDIR)), "/",
  !EVAL(!unquote(!JOB_DATAFILEROOT)), ".xls"))<br>
  !ENDDEFINE.<br>
  OUTPUT EXPORT /XLS DOCUMENTFILE =!out.</p>

  <p><span class="runinhead">결과 데이터 파일 디렉토리.</span> 지정되는 경우
  명령문이 완료된 후 각 데이터 세트에 대해 데이터 파일은 해당 디렉토리에 .sav 파일로서
  기록됩니다. 이는 파일 세트의 변환을 수행하는 경우 유용할 수 있습니다. 물론 이 필드를 공백으로 두고 사용자가 선택하는 데이터 파일 결과를 기록할 수도 있습니다. JOB_OUTPUTDATADIR 파일 핸들 또는 !JOB_OUTPUTDATADIR 매크로는 이 명령에서 지정한
  데이터 결과 위치를 식별합니다.</p>

  <p><span class="runinhead">뷰어 출력결과.</span> 뷰어 출력결과는 각 데이터 파일에 대해
  별도의 파일로서 저장되거나 전체 작업에 대해서는 단일 파일로 저장될 수 있습니다. 해당하는 단일 선택 단추를 선택하고, 디렉토리 이름 또는 파일 사양을 입력하십시오. 단일 파일을 작성하지만 다음 제어에서 디렉토리만 입력하도록 선택하는 경우,
  파일의 이름은 <i>VIEWER.SPV</i>로 변경됩니다. 해당 제어에 대해 찾아보기 단추를 사용하면
  디렉토리만 지정할 수 있지만 사용자가 파일 이름을 입력할 수 있습니다.</p>

  <p><span class="runinhead">파일에 작업 로그 쓰기.</span> 작업 로그에 대한 파일을
  지정하십시오. 로그는 프로시저가 처리 및 작성하는 파일을 표시하며, 각각에는 시간소인이 있습니다.</p>

  <p class="bullet">• 명령문 파일로 수행되는 조작은 기록되지 않습니다.</p>

  <p class="bullet">• 파일 처리 시 심각한 오류가 발생하면 로그에 오류 항목이 기록됩니다.</p>

  <p><span class="runinhead">처리 전 실행할 명령문.</span> 입력 파일 처리를 시작하기 전에
  한 번 실행할 명령문 파일을 지정할 수 있습니다. 매크로 및 파일 작업은 처리 목록에서 첫 번째 파일에 대해
  정의됩니다. 중요 오류가 발생하면 처리는 중지됩니다.</p>

  <p><span class="runinhead">모든 처리 후 실행할 명령문. </span> 모든 입력 파일을 처리한 후 한 번 실행할 명령문 파일을 지정할 수 있습니다. 매크로 및 파일 작업은 처리 목록에서 마지막 파일에 대해 정의됩니다.</p>

  <h2>옵션</h2>

  <p><span class="runinhead">로그 파일 모드.</span> 작업에 대한 로그 항목이
  기존 파일에 첨부되는지 또는 컨텐츠를 대체하는지 선택하십시오.</p>

  <p><span class="runinhead">각 단계 이후 데이터 파일 처리.</span> 입력 파일 처리를 각각 반복한 후
  모든 데이터 세트를 닫으려면 <span class="screen">닫기</span>를 선택하십시오. 각 단계 이후 데이터 세트를 열어 두는 것은 많은 데이터 세트를 하나로 결합하는 경우 유용합니다. 최종 데이터 세트는 이 명령이 완료된 후 저장될 수 있습니다.</p>

  <p><span class="runinhead">오류 처리.</span> 오류가 발생하면, 다음 데이터 파일을 계속해서
  처리할 것인지 또는 추가 파일 처리를 중지할 것인지 선택할 수 있습니다. 가능하면
  중지가 지정된 경우라도 오류의 원인이 되는 데이터 파일에 대해 결과 데이터 및 뷰어 파일을
  계속 기록합니다.</p>

  <p><span class="runinhead">매크로 및 파일 작업에 대한 루트 이름. </span> 기본적으로 정의된 파일 핸들 및 매크로의 접두문자는
  JOB 및 !JOB이고 각각 뒤에 밑줄이 옵니다. JOB 대신에 다른 접두문자를
  지정할 수 있습니다. 매크로의 경우 접두문자에 !가 첨부됩니다.<i>!</i>.</p>

  <h2>매크로 정의</h2>

  <p>이 하위 대화 상자를 사용하여 명령문 파일에서 사용할 수 있는 자체 매크로를 정의하십시오. 값이 일반 명령문이거나 변수 이름인 !PARM1부터 !PARM5까지의
  5개 매크로를 정의할 수 있고, 값이 따옴표로 묶인 문자가 될 !QPARM1부터
  !QPARM5까지의 5개 매크로를 정의할 수 있습니다. 따옴표로 묶인 문자열은 변환에서
  제목 또는 문자열 표현식에 유용합니다.</p>

  <p><span class="runinhead">값이 따옴표로 묶이지 않은 매크로. </span> 따옴표 없이 표시되어야 하는 SPSS 명령문을 나타내는 매크로 텍스트를 입력하십시오.</p>

  <p><span class="runinhead">값이 따옴표로 묶인 문자인 매크로. </span> 제목, 레이블 또는 파일 이름과 같이 따옴표로 표시되어야 하는
  SPSS 명령문을 표시하는 매크로 텍스트를 입력하십시오.</p>

  <p class="bullet">• 정의에서 문자를 따옴표로 묶어야 하는 경우 작은따옴표(')를
  사용하십시오. 생성된 매크로 텍스트는 큰따옴표(")로 묶여야 합니다.</p>

  <h3>특정 케이스 ID의 데이터 파일을 검색하는 매크로 예제</h3>일부 파일 세트에
  PatientID 이름의 ID 변수가 있고 "Johann Schmidt" ID의 모든 발생을 찾으려 한다고 가정합니다. 명령문
  파일에서 다음 단편을 사용할 수 있습니다.<code><br>
  SELECT IF !PARM1 EQ !QPARM1.<br>
  FREQUENCIES !PARM1.</code><br>
  여기서 PARM1 필드에는 PatientID를 입력하고, QPARM1 필드에는 Johann Schmidt를 입력합니다.  <p class="bullet">• 선택된 케이스가 없는 경우, FREQUENCIES
  명령은 오류를 생성하므로 오류 핸들 모수를 설정하여 다음 파일을 계속합니다. (OMS를 사용하여
  결과로 생성되는 경고 표를 숨길 수 있습니다.)</p>

  <p class="bullet">• 결과를 보기 쉽도록 단일 파일로 뷰어 출력결과를 기록합니다.</p>

  <h2>데이터 검색 유틸리티</h2>이 명령을 사용하여 SAV 파일 세트에서 케이스를 검색하는
  대화 상자는 편집&gt;데이터 파일 검색을 참조하십시오.  <h2>추가 기능</h2>다음 명령문을 실행하십시오.<br>
  SPSSINC PROCESS FILES /HELP.<br>
  전체 명령문 설명을 표시합니다. 명령문을 사용하면 결과가
  SPSS 프로세서의 현재 작업 디렉토리로 기록될 수 있습니다. SHOW DIRECTORY 명령은 해당 디렉토리의 이름을 표시합니다.  <p>파일을 사용하여 처리해야 하는 파일을 지정하려면, 파일 경로를 포함하여
  라인당 하나의 이름으로 파일을 작성하십시오. 이름은 큰따옴표(")로 묶여야 합니다. 라인
다음 내용은 무시됩니다. 빈 라인과 #으로 시작하는 라인은 무시됩니다.</p>

  <h2>요구 사항</h2>이 명령에서는 Python Programmability 플러그인이 필요합니다. IBM SPSS Statistics CD에서 Python 플러그인을 찾거나 SPSS Developer Central(www.spss.com/devcentral)에서 다운로드할 수 있습니다. <hr>

  <p style="font-size:80%;">© Copyright IBM Corp. 1989, 2013</p>
</body>
</html>
